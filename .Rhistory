library(dplyr)
library(FrF2)
library(magrittr)
library(ungroup)
library(dplyr)
library(tidyverse)
library(ggplot2)
library (MASS)
#librerias para el clustering
library(cluster) #Para calcular la silueta
library(e1071)#para cmeans
library(mclust) #mixtures of gaussians
library(fpc) #para hacer el plotcluster
library(NbClust) #Para determinar el número de clusters óptimo
library(factoextra) #Para hacer gráficos bonitos de clustering
library(hopkins) #Para revisar si vale la pena hacer agrupamiento
library(GGally) #Para hacer el conjunto de graficos
library(FeatureImpCluster) #Para revisar la importancia de las variables en los grupos.
library(pheatmap) #Para hacer mapa de calor
datos <- read.csv("./defunciones_combinadas.csv")
summary(datos)
str(datos)
library(dplyr)
datos_filtrados <- datos %>%
group_by(año_info, Causa.de.muerte) %>%
filter(n() == max(n())) %>%
ungroup()
tabla_frecuencia <- table(datos_filtrados$Causa.de.muerte, datos_filtrados$año_info)
tabla_frecuencia <- as.data.frame(tabla_frecuencia)
library(knitr)
kable(tabla_frecuencia, caption = "Tabla de frecuencia de Causa de muerte y años")
# Ciclo para crear un histograma por cada causa de muerte
for (i in unique(tabla_frecuencia$Var1)) {
# Filtrar los datos por causa de muerte
datos_causa_muerte <- filter(tabla_frecuencia, Var1 == i)
# Crear el gráfico de histograma
grafico <- ggplot(data = datos_causa_muerte, aes(x = Var2, y = Freq)) +
geom_bar(stat = "identity", fill = "blue") +
ggtitle(paste0("Frecuencia de ", i, " por año")) +
xlab("Año") + ylab("Frecuencia") +
theme(plot.title = element_text(size = 20, face = "bold"),
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14))
# Imprimir el gráfico
print(grafico)
}
##primero debemos de volver numericas nuestras variables y finalmente escalarlas
Causa.de.muerte <- as.numeric(tabla_frecuencia[,"Var1"])
Total <- as.numeric(tabla_frecuencia[,"Freq"])
año_info <- as.numeric(tabla_frecuencia[,"Var2"])
datosc <- data.frame(Causa.de.muerte,año_info,Total)
#Escalar los datos
datosCS <- scale(na.omit(datosc))
hopkins(datosCS)
datos_dist<- dist(datosCS)
#Matriz de distancia
datos_dist<- dist(datosCS)
fviz_dist(datos_dist, show_labels = F)
fviz_nbclust(datosCS, kmeans, method = "wss") +
labs(subtitle = "Metodo del codo")
fviz_nbclust(datosCS, kmeans, method = "silhouette") +
labs(subtitle = "Método de la silueta")
km<-kmeans(datosCS,5,iter.max =100)
plotcluster(datosCS,km$cluster)
km
fviz_cluster(km, data = datosCS,geom = "point", ellipse.type = "norm")
silkm<-silhouette(km$cluster,dist(datosCS))
mean(silkm[,3])
Kmean<-mean(silkm[,3])
matriz_dist<- dist(datosCS)
hc<-hclust(datos_dist, method = "ward.D2") #Genera el clustering jerarquico de los datos
plot(hc, cex=0.5, axes=FALSE) #Genera el dendograma
cutree(hc, h = 5)
rect.hclust(hc,k=5)
groups<-cutree(hc,k=5) #corta el dendograma, determinando el grupo de cada fila
silhc<-silhouette(groups,datos_dist)
mean(silhc[,3])
Jerarquico<-mean(silhc[,3])
plot(silkm, cex.names=.4, col=1:4, border=NA)
plot(silhc, cex.names=.4, col=1:4, border = NA)
df <- data.frame(Algoritmo=c("K-mean", "Jerarquico"),
Silueta=c(Kmean, Jerarquico))
df
